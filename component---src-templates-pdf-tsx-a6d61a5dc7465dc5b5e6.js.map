{"version":3,"file":"component---src-templates-pdf-tsx-a6d61a5dc7465dc5b5e6.js","mappings":"+OAuBe,SAAS,EAATA,GAA0C,IAAhC,KAAEC,EAAI,YAAEC,GAAsBF,EACnD,MAAMG,GAAYC,EAAAA,EAAAA,cAAaC,GACpBC,OAAOC,QAAQF,GAAMG,QAAO,CAACC,EAAGC,KAAmB,IAAhBC,EAAKC,GAAMF,EACjD,OAAc,OAAVE,EACOH,EAEPI,MAAMC,QAAQF,GACP,IACAH,EACH,CAACE,GAAMC,EAAMG,IAAIC,IAGlB,IACAP,EACH,CAACE,GAAMK,EAAWJ,GACrB,GACF,CAAC,IACL,IAEGI,GAAaZ,EAAAA,EAAAA,cACdQ,IACG,GAAIA,EAAMK,WAAW,QAAS,CAC1B,MAAMC,EAAQjB,EAAKkB,MAAMC,MAAMlB,EAAYmB,QAAQC,MAC9CjB,GAASA,EAAKkB,KAAOX,IAE1B,GAAIM,EAAO,OAAOA,CACtB,CACA,OAAON,CAAK,GAEhB,CAACX,EAAKkB,MAAOjB,EAAYmB,UAGvB,GAAEG,EAAE,WAAEC,EAAU,QAAEC,EAAO,YAAEC,IAAgBC,EAAAA,EAAAA,UAAQ,KACrD,MAAMJ,EAAKvB,EAAKuB,GACVK,EAAW1B,EAAUqB,GAErBG,EAAc1B,EAAKkB,MAAMW,MAAM5B,EAAYmB,QAAQb,QACrD,CAACC,EAAKsB,KACF,GACIA,EAAKC,QAAQC,SAAST,EAAGU,OACzBH,EAAKI,OAAOF,SAAST,EAAGU,MAC1B,CACE,MAAME,EAASnC,EAAKkB,MAAMC,MAAMlB,EAAYmB,QAAQC,MAC/CjB,GAASA,EAAKkB,KAAOQ,EAAKC,UAEzBK,EAASpC,EAAKkB,MAAMC,MAAMlB,EAAYmB,QAAQC,MAC/CjB,GAASA,EAAKkB,KAAOQ,EAAKI,SAG/B1B,EAAIsB,EAAKO,WAAa,GAAHC,QAAAC,EAAAA,EAAAA,GACX/B,EAAIsB,EAAKO,YAAc,IAAE,CAC7B,CACIF,SACAC,SACAC,UAAWP,EAAKO,YAG5B,CACA,OAAO7B,CAAG,GAEd,CAAC,GASL,MAAO,CAAEe,GAAIK,EAAUJ,WANJnB,OAAOmC,YACtBxC,EAAKwB,WAAWvB,EAAYmB,SAKGK,QAFnBpB,OAAOmC,YAAYxC,EAAKyB,QAAQxB,EAAYmB,SAEhBM,cAAa,GAC1D,CAAC1B,IAEJ,OACIyC,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,WACIC,WAAWC,EAAAA,EAAAA,IACP,cACA,aACA,cACA,aACA,OACA,WACA,WAGJF,EAAAA,cAACG,EAAAA,GAAM,CAACC,KAAM,CAAEH,WAAWC,EAAAA,EAAAA,IAAG,OAAQ,SAAU,UAC5CF,EAAAA,cAACK,EAAAA,GAAO,CAACC,MAAO,GACXxB,EAAGyB,KAAM,IACVP,EAAAA,cAAA,QACIC,WAAWC,EAAAA,EAAAA,IAAG,YAChB,IAAIpB,EAAG0B,eAEbR,EAAAA,cAAA,SAAIlB,EAAG2B,aACPT,EAAAA,cAAA,SACIC,WAAWC,EAAAA,EAAAA,IAAG,OAAQ,QAAS,OAAQ,iBAEvCF,EAAAA,cAAA,KAAGU,KAAK,+BACJV,EAAAA,cAAA,OACIW,OAAO,KACPC,MAAM,KACNC,IAAI,SACJC,IAAI,8CAGZd,EAAAA,cAAA,KAAGU,KAAK,yCACJV,EAAAA,cAAA,OACIW,OAAO,KACPC,MAAM,KACNC,IAAI,WACJC,IAAI,gDAGZd,EAAAA,cAAA,KAAGU,KAAK,sBACJV,EAAAA,cAAA,OACIW,OAAO,KACPC,MAAM,KACNC,IAAI,QACJC,IAAI,6CAGZd,EAAAA,cAAA,KAAGU,KAAK,0CAAyC,WAIrDV,EAAAA,cAAA,aACIA,EAAAA,cAACK,EAAAA,GAAO,CAACC,MAAO,GAAIvB,EAAWgC,YAC9B9B,EAAY8B,WAAW1C,KAAK2C,IACzB,MAAM3B,EAAO9B,EAAKkB,MAAMW,MACpB5B,EAAYmB,QACdC,MAAMS,GACGA,EAAKI,SAAWuB,EAAMrB,OAAOd,KAElCoC,EAAS1D,EAAKkB,MAAMC,MACtBlB,EAAYmB,QACdC,MAAMjB,IACJ,GAAkB,oBAAdA,EAAKuD,KACL,OAAOvD,EAAKkB,MAAOQ,aAAI,EAAJA,EAAMC,QAC7B,IAEJ,OACIU,EAAAA,cAACmB,EAAAA,GAAK,CACFlD,IAAK+C,EAAMrB,OAAOd,GAClBoB,WAAWC,EAAAA,EAAAA,IACP,OACA,eACA,wBACA,QACA,SAGHc,EAAMrB,OAAOY,KACdP,EAAAA,cAACoB,EAAAA,GAAM,CACHlD,MAAO+C,aAAM,EAANA,EAAQI,YACfC,IAAKL,aAAM,EAANA,EAAQM,WAAW,GACxBC,KAAM,EACNvB,WAAWC,EAAAA,EAAAA,IAAG,WAEd,IAGhBF,EAAAA,cAACK,EAAAA,GAAO,CAACC,MAAO,GAAIvB,EAAW0C,eAC9BxC,EAAYwC,cAAcpD,KAAKqD,IAC5B,MAAMrC,EAAO9B,EAAKkB,MAAMW,MACpB5B,EAAYmB,QACdC,MAAMS,GACGA,EAAKI,SAAWiC,EAAS/B,OAAOd,KAErCoC,EAAS1D,EAAKkB,MAAMC,MACtBlB,EAAYmB,QACdC,MAAMjB,IACJ,GAAkB,oBAAdA,EAAKuD,KACL,OAAOvD,EAAKkB,MAAOQ,aAAI,EAAJA,EAAMC,QAC7B,IAEJ,OACIU,EAAAA,cAACmB,EAAAA,GAAK,CACFlD,IAAKyD,EAAS/B,OAAOd,GACrBoB,WAAWC,EAAAA,EAAAA,IACP,OACA,eACA,wBACA,QACA,SAGHwB,EAAS/B,OAAOY,KACjBP,EAAAA,cAACoB,EAAAA,GAAM,CACHlD,MAAO+C,aAAM,EAANA,EAAQI,YACfC,IAAKL,aAAM,EAANA,EAAQM,WAAW,GACxBC,KAAM,EACNvB,WAAWC,EAAAA,EAAAA,IAAG,WAEd,OAO5BF,EAAAA,cAAA,WACIC,WAAWC,EAAAA,EAAAA,IACP,eACA,cACA,aACA,cACA,aACA,OACA,WAGJF,EAAAA,cAACG,EAAAA,GAAM,CACHC,KAAM,CAAEH,WAAWC,EAAAA,EAAAA,IAAG,OAAQ,SAAU,OAAQ,UAEhDF,EAAAA,cAACK,EAAAA,GAAO,CAACC,MAAO,EAAGL,WAAWC,EAAAA,EAAAA,OACzBnB,EAAW4C,kBAEhB3B,EAAAA,cAAA,UACKf,EAAY0C,iBAAiBtD,KAAKuD,IAC/B,MAAMC,EAAWtE,EAAKkB,MAAMC,MACxBlB,EAAYmB,QACdC,MAAMjB,GAEAA,EAAKkB,KAED+C,EAAcjC,OACTkC,SACP,KAGV,OACI7B,EAAAA,cAAA,MACI/B,IAAK2D,EAAcjC,OAAOY,KAC1BN,WAAWC,EAAAA,EAAAA,IACP,OACA,WACA,QACA,SAGJF,EAAAA,cAAA,QAAMC,WAAWC,EAAAA,EAAAA,IAAG,cACf0B,EAAcjC,OAAOmC,cAAc,KAAG,IACtCD,aAAQ,EAARA,EAAUtB,MAEdqB,EAAcjC,OAAOY,KACrB,KAKjBP,EAAAA,cAACK,EAAAA,GAAO,CAACC,MAAO,EAAGL,WAAWC,EAAAA,EAAAA,OACzBnB,EAAWgD,aAEhB/B,EAAAA,cAAA,UACKf,EAAY8C,YAAY1D,KAAK0D,IAC1B,MAAM1C,EAAO9B,EAAKkB,MAAMW,MACpB5B,EAAYmB,QACdC,MAAMS,GACGA,EAAKI,SAAWsC,EAAYpC,OAAOd,KAExCmD,EAAezE,EAAKkB,MAAMC,MAC5BlB,EAAYmB,QACdC,MAAMjB,GACGA,EAAKkB,MAAOQ,aAAI,EAAJA,EAAMC,WAE7B,OACIU,EAAAA,cAAA,MACI/B,IAAK8D,EAAYpC,OAAOY,KACxBN,WAAWC,EAAAA,EAAAA,IACP,OACA,WACA,QACA,SAGJF,EAAAA,cAAA,QAAMC,WAAWC,EAAAA,EAAAA,IAAG,cACf6B,EAAYpC,OAAOsC,UAAU,KAAG,IAChCF,EAAYpC,OAAOuC,QAAQ,KAAG,IAC9BH,EAAYpC,OAAOY,MAEvByB,aAAY,EAAZA,EAAczB,KACd,KAKjBP,EAAAA,cAACK,EAAAA,GAAO,CAACC,MAAO,EAAGL,WAAWC,EAAAA,EAAAA,OACzBnB,EAAWoD,QAEhBnC,EAAAA,cAAA,UACKf,EAAYkD,OAAO9D,KAAK8D,GAEjBnC,EAAAA,cAAA,MACI/B,IAAKkE,EAAOzC,OAAOa,KACnBN,WAAWC,EAAAA,EAAAA,IACP,OACA,WACA,QACA,SAGJF,EAAAA,cAAA,QAAMC,WAAWC,EAAAA,EAAAA,IAAG,cACfiC,EAAOzC,OAAOoC,eACX,GAAGK,EAAOzC,OAAOoC,mBAAoB,IACxC9C,EAAQmD,EAAOzC,OAAO0C,QAE1BD,EAAOzC,OAAOa,SAM/BP,EAAAA,cAACK,EAAAA,GAAO,CAACC,MAAO,EAAGL,WAAWC,EAAAA,EAAAA,OACzBnB,EAAWsD,aAEhBrC,EAAAA,cAAA,UACKf,EAAYoD,YAAYhE,KAAK8D,GAEtBnC,EAAAA,cAAA,MACI/B,IAAKkE,EAAOzC,OAAOa,KACnBN,WAAWC,EAAAA,EAAAA,IACP,OACA,WACA,QACA,SAGJF,EAAAA,cAAA,QAAMC,WAAWC,EAAAA,EAAAA,IAAG,cACfiC,EAAOzC,OAAOuC,WACX,GAAGE,EAAOzC,OAAOuC,eAAgB,IACpCjD,EAAQmD,EAAOzC,OAAO0C,QAE1BD,EAAOzC,OAAOa,SAM/BP,EAAAA,cAACK,EAAAA,GAAO,CAACC,MAAO,EAAGL,WAAWC,EAAAA,EAAAA,OACzBnB,EAAWuD,UAEhBtC,EAAAA,cAAA,UACKf,EAAYqD,SAASjE,KAAKkE,IACvBC,QAAQC,IAAI,CAAEF,UAEVvC,EAAAA,cAAA,MACI/B,IAAKsE,EAAM7C,OAAOb,GAClBoB,WAAWC,EAAAA,EAAAA,IACP,OACA,WACA,QACA,SAGJF,EAAAA,cAAA,QAAMC,WAAWC,EAAAA,EAAAA,IAAG,cACfqC,EAAM7C,OAAOuC,WACV,GAAGM,EAAM7C,OAAOuC,eAAgB,IACnCjD,EAAQuD,EAAM7C,OAAO0C,QAEzBG,EAAM7C,OAAOa,YASlD,CAEO,MAAMmC,EAAOC,IAAoC,IAAnC,YAAEnF,EAAW,KAAED,GAAeoF,EAC/C,OACI3C,EAAAA,cAAC4C,EAAAA,GAAa,CACVC,MAAO,GAAGtF,EAAKuB,GAAGyB,UAAU/C,EAAYsF,KAAKD,QAC7CrF,YAAaA,EACbD,KAAMA,EAAKuB,GACXiE,QAAQ,OACV,C","sources":["webpack://@hgod-in-cv/gatsby/./src/templates/Pdf.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from \"react\";\nimport { graphql, PageProps } from \"gatsby\";\nimport {\n    Head as PrimitiveHead,\n    Heading,\n    Scroll,\n    Slider,\n    Label,\n} from \"#root/components\";\nimport {\n    PageContext,\n    Graph,\n    Person,\n    Properties,\n    UnionSchemaType,\n} from \"@hgod-in-cv/data/src/types\";\nimport { tw } from \"#root/lib\";\n\nexport type PdfPage = PageProps<\n    { graph: Graph; me: Person; properties: Properties },\n    PageContext\n>;\n\nexport default function ({ data, pageContext }: PdfPage) {\n    const parseNode = useCallback((node) => {\n        return Object.entries(node).reduce((acc, [key, value]) => {\n            if (value === null) {\n                return acc;\n            }\n            if (Array.isArray(value)) {\n                return {\n                    ...acc,\n                    [key]: value.map(parseField),\n                };\n            }\n            return {\n                ...acc,\n                [key]: parseField(value),\n            };\n        }, {});\n    }, []);\n\n    const parseField = useCallback(\n        (value) => {\n            if (value.startsWith(\"http\")) {\n                const found = data.graph.nodes[pageContext.locale].find(\n                    (node) => node.id === value\n                );\n                if (found) return found;\n            }\n            return value;\n        },\n        [data.graph, pageContext.locale]\n    );\n\n    const { me, properties, classes, connections } = useMemo(() => {\n        const me = data.me;\n        const parsedMe = parseNode(me) as Person<UnionSchemaType[] | string[]>;\n\n        const connections = data.graph.links[pageContext.locale].reduce(\n            (acc, link) => {\n                if (\n                    link.subject.includes(me.path) ||\n                    link.object.includes(me.path)\n                ) {\n                    const source = data.graph.nodes[pageContext.locale].find(\n                        (node) => node.id === link.subject\n                    );\n                    const target = data.graph.nodes[pageContext.locale].find(\n                        (node) => node.id === link.object\n                    );\n\n                    acc[link.predicate] = [\n                        ...(acc[link.predicate] || []),\n                        {\n                            source,\n                            target,\n                            predicate: link.predicate,\n                        },\n                    ];\n                }\n                return acc;\n            },\n            {}\n        );\n\n        const properties = Object.fromEntries(\n            data.properties[pageContext.locale]\n        );\n\n        const classes = Object.fromEntries(data.classes[pageContext.locale]);\n\n        return { me: parsedMe, properties, classes, connections };\n    }, [data]);\n\n    return (\n        <>\n            <section\n                className={tw(\n                    \"col-start-3\",\n                    \"col-span-1\",\n                    \"row-start-2\",\n                    \"row-span-2\",\n                    \"flex\",\n                    \"flex-col\",\n                    \"w-full\"\n                )}\n            >\n                <Scroll root={{ className: tw(\"flex\", \"w-full\", \"pr-6\") }}>\n                    <Heading level={1}>\n                        {me.name}{\" \"}\n                        <span\n                            className={tw(\"text-sm\")}\n                        >{`(${me.birthDate})`}</span>\n                    </Heading>\n                    <p>{me.description}</p>\n                    <aside\n                        className={tw(\"flex\", \"gap-2\", \"my-2\", \"items-center\")}\n                    >\n                        <a href=\"https://github.com/hgodinho\">\n                            <img\n                                height=\"16\"\n                                width=\"16\"\n                                alt=\"GitHub\"\n                                src=\"https://cdn.simpleicons.org/github/black\"\n                            />\n                        </a>\n                        <a href=\"https://www.linkedin.com/in/hgodinho/\">\n                            <img\n                                height=\"16\"\n                                width=\"16\"\n                                alt=\"Linkedin\"\n                                src=\"https://cdn.simpleicons.org/linkedin/black\"\n                            />\n                        </a>\n                        <a href=\"mailto:ola@hgod.in\">\n                            <img\n                                height=\"16\"\n                                width=\"16\"\n                                alt=\"Gmail\"\n                                src=\"https://cdn.simpleicons.org/gmail/black\"\n                            />\n                        </a>\n                        <a href=\"http://lattes.cnpq.br/0325402816569874\">\n                            lattes\n                        </a>\n                    </aside>\n                    <aside>\n                        <Heading level={3}>{properties.knowsAbout}</Heading>\n                        {connections.knowsAbout.map((thing) => {\n                            const link = data.graph.links[\n                                pageContext.locale\n                            ].find((link) => {\n                                return link.object === thing.target.id;\n                            });\n                            const rating = data.graph.nodes[\n                                pageContext.locale\n                            ].find((node) => {\n                                if (node.type === \"AggregateRating\") {\n                                    return node.id === link?.subject;\n                                }\n                            });\n                            return (\n                                <Label\n                                    key={thing.target.id}\n                                    className={tw(\n                                        \"flex\",\n                                        \"items-center\",\n                                        \"place-content-between\",\n                                        \"gap-2\",\n                                        \"mb-2\"\n                                    )}\n                                >\n                                    {thing.target.name}\n                                    <Slider\n                                        value={rating?.ratingValue}\n                                        max={rating?.bestRating[0]}\n                                        step={1}\n                                        className={tw(\"w-4/6\")}\n                                    />\n                                </Label>\n                            );\n                        })}\n                        <Heading level={3}>{properties.knowsLanguage}</Heading>\n                        {connections.knowsLanguage.map((language) => {\n                            const link = data.graph.links[\n                                pageContext.locale\n                            ].find((link) => {\n                                return link.object === language.target.id;\n                            });\n                            const rating = data.graph.nodes[\n                                pageContext.locale\n                            ].find((node) => {\n                                if (node.type === \"AggregateRating\") {\n                                    return node.id === link?.subject;\n                                }\n                            });\n                            return (\n                                <Label\n                                    key={language.target.id}\n                                    className={tw(\n                                        \"flex\",\n                                        \"items-center\",\n                                        \"place-content-between\",\n                                        \"gap-2\",\n                                        \"mb-2\"\n                                    )}\n                                >\n                                    {language.target.name}\n                                    <Slider\n                                        value={rating?.ratingValue}\n                                        max={rating?.bestRating[0]}\n                                        step={1}\n                                        className={tw(\"w-4/6\")}\n                                    />\n                                </Label>\n                            );\n                        })}\n                    </aside>\n                </Scroll>\n            </section>\n\n            <section\n                className={tw(\n                    \"bg-slate-300\",\n                    \"col-start-5\",\n                    \"col-span-1\",\n                    \"row-start-2\",\n                    \"row-span-2\",\n                    \"flex\",\n                    \"w-full\"\n                )}\n            >\n                <Scroll\n                    root={{ className: tw(\"flex\", \"w-full\", \"ml-6\", \"pr-6\") }}\n                >\n                    <Heading level={2} className={tw()}>\n                        {properties.hasCertification}\n                    </Heading>\n                    <ul>\n                        {connections.hasCertification.map((certification) => {\n                            const issuedBy = data.graph.nodes[\n                                pageContext.locale\n                            ].find((node) => {\n                                return (\n                                    node.id ===\n                                    (\n                                        certification.target\n                                            .issuedBy as string[]\n                                    )[0]\n                                );\n                            });\n                            return (\n                                <li\n                                    key={certification.target.name}\n                                    className={tw(\n                                        \"flex\",\n                                        \"flex-col\",\n                                        \"gap-1\",\n                                        \"mb-2\"\n                                    )}\n                                >\n                                    <span className={tw(\"font-bold\")}>\n                                        {certification.target.datePublished} -{\" \"}\n                                        {issuedBy?.name}\n                                    </span>\n                                    {certification.target.name}\n                                </li>\n                            );\n                        })}\n                    </ul>\n\n                    <Heading level={2} className={tw()}>\n                        {properties.affiliation}\n                    </Heading>\n                    <ul>\n                        {connections.affiliation.map((affiliation) => {\n                            const link = data.graph.links[\n                                pageContext.locale\n                            ].find((link) => {\n                                return link.object === affiliation.target.id;\n                            });\n                            const affiliatedTo = data.graph.nodes[\n                                pageContext.locale\n                            ].find((node) => {\n                                return node.id === link?.subject;\n                            });\n                            return (\n                                <li\n                                    key={affiliation.target.name}\n                                    className={tw(\n                                        \"flex\",\n                                        \"flex-col\",\n                                        \"gap-1\",\n                                        \"mb-2\"\n                                    )}\n                                >\n                                    <span className={tw(\"font-bold\")}>\n                                        {affiliation.target.startDate} -{\" \"}\n                                        {affiliation.target.endDate} |{\" \"}\n                                        {affiliation.target.name}\n                                    </span>\n                                    {affiliatedTo?.name}\n                                </li>\n                            );\n                        })}\n                    </ul>\n\n                    <Heading level={2} className={tw()}>\n                        {properties.author}\n                    </Heading>\n                    <ul>\n                        {connections.author.map((author) => {\n                            return (\n                                <li\n                                    key={author.source.name}\n                                    className={tw(\n                                        \"flex\",\n                                        \"flex-col\",\n                                        \"gap-1\",\n                                        \"mb-2\"\n                                    )}\n                                >\n                                    <span className={tw(\"font-bold\")}>\n                                        {author.source.datePublished &&\n                                            `${author.source.datePublished} | `}{\" \"}\n                                        {classes[author.source._type]}\n                                    </span>\n                                    {author.source.name}\n                                </li>\n                            );\n                        })}\n                    </ul>\n\n                    <Heading level={2} className={tw()}>\n                        {properties.contributor}\n                    </Heading>\n                    <ul>\n                        {connections.contributor.map((author) => {\n                            return (\n                                <li\n                                    key={author.source.name}\n                                    className={tw(\n                                        \"flex\",\n                                        \"flex-col\",\n                                        \"gap-1\",\n                                        \"mb-2\"\n                                    )}\n                                >\n                                    <span className={tw(\"font-bold\")}>\n                                        {author.source.startDate &&\n                                            `${author.source.startDate} | `}{\" \"}\n                                        {classes[author.source._type]}\n                                    </span>\n                                    {author.source.name}\n                                </li>\n                            );\n                        })}\n                    </ul>\n\n                    <Heading level={2} className={tw()}>\n                        {properties.attendee}\n                    </Heading>\n                    <ul>\n                        {connections.attendee.map((event) => {\n                            console.log({ event });\n                            return (\n                                <li\n                                    key={event.source.id}\n                                    className={tw(\n                                        \"flex\",\n                                        \"flex-col\",\n                                        \"gap-1\",\n                                        \"mb-2\"\n                                    )}\n                                >\n                                    <span className={tw(\"font-bold\")}>\n                                        {event.source.startDate &&\n                                            `${event.source.startDate} | `}{\" \"}\n                                        {classes[event.source._type]}\n                                    </span>\n                                    {event.source.name}\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </Scroll>\n            </section>\n        </>\n    );\n}\n\nexport const Head = ({ pageContext, data }: PdfPage) => {\n    return (\n        <PrimitiveHead\n            title={`${data.me.name}  @${pageContext.site.title}`}\n            pageContext={pageContext}\n            data={data.me}\n            variant=\"pdf\"\n        />\n    );\n};\n\nexport const query = graphql`\n    query byLocale($locale: String) {\n        me: person(_id: { eq: \"#prs-1\" }, locale: { eq: $locale }) {\n            id\n            _context\n            _id\n            _type\n            additionalType\n            affiliation\n            award\n            birthDate\n            description\n            email\n            familyName\n            givenName\n            hasCertification\n            hasOccupation\n            homeLocation\n            honorificPrefix\n            identifier\n            image\n            jobTitle\n            knowsAbout\n            knowsLanguage\n            locale\n            memberOf\n            name\n            nationality\n            path\n            performerIn\n            sameAs\n            seeks\n            subjectOf\n            type\n            birthPlace\n            brand\n            alternateName\n        }\n        properties {\n            es\n            en\n            pt_br\n        }\n        classes {\n            es\n            en\n            pt_br\n        }\n        graph {\n            links {\n                en {\n                    object\n                    predicate\n                    subject\n                    value\n                }\n                es {\n                    object\n                    predicate\n                    subject\n                    value\n                }\n                pt_br {\n                    object\n                    predicate\n                    subject\n                    value\n                }\n            }\n            nodes {\n                en {\n                    _context\n                    _id\n                    _type\n                    address\n                    attendee\n                    author\n                    bestRating\n                    birthDate\n                    containsPlace\n                    contributor\n                    dateCreated\n                    datePublished\n                    department\n                    description\n                    email\n                    employee\n                    endDate\n                    familyName\n                    givenName\n                    hasCertification\n                    homeLocation\n                    honorificPrefix\n                    id\n                    identifier\n                    inLanguage\n                    issuedBy\n                    itemReviewed\n                    jobTitle\n                    keywords\n                    knowsAbout\n                    knowsLanguage\n                    location\n                    name\n                    organizer\n                    pagination\n                    path\n                    publication\n                    publisher\n                    ratingValue\n                    sameAs\n                    startDate\n                    type\n                    worstRating\n                }\n                es {\n                    _context\n                    _id\n                    _type\n                    address\n                    attendee\n                    author\n                    bestRating\n                    birthDate\n                    containsPlace\n                    contributor\n                    dateCreated\n                    datePublished\n                    department\n                    description\n                    email\n                    employee\n                    endDate\n                    familyName\n                    givenName\n                    hasCertification\n                    homeLocation\n                    honorificPrefix\n                    id\n                    identifier\n                    inLanguage\n                    issuedBy\n                    itemReviewed\n                    jobTitle\n                    keywords\n                    knowsAbout\n                    knowsLanguage\n                    location\n                    name\n                    organizer\n                    pagination\n                    path\n                    publication\n                    publisher\n                    ratingValue\n                    sameAs\n                    startDate\n                    type\n                    worstRating\n                }\n                pt_br {\n                    _context\n                    _id\n                    _type\n                    address\n                    attendee\n                    author\n                    bestRating\n                    birthDate\n                    containsPlace\n                    contributor\n                    dateCreated\n                    datePublished\n                    department\n                    description\n                    email\n                    employee\n                    endDate\n                    familyName\n                    givenName\n                    hasCertification\n                    homeLocation\n                    honorificPrefix\n                    id\n                    identifier\n                    inLanguage\n                    issuedBy\n                    itemReviewed\n                    jobTitle\n                    keywords\n                    knowsAbout\n                    knowsLanguage\n                    location\n                    name\n                    organizer\n                    pagination\n                    path\n                    publication\n                    publisher\n                    ratingValue\n                    sameAs\n                    startDate\n                    type\n                    worstRating\n                }\n            }\n        }\n    }\n`;\n"],"names":["_ref","data","pageContext","parseNode","useCallback","node","Object","entries","reduce","acc","_ref2","key","value","Array","isArray","map","parseField","startsWith","found","graph","nodes","locale","find","id","me","properties","classes","connections","useMemo","parsedMe","links","link","subject","includes","path","object","source","target","predicate","concat","_toConsumableArray","fromEntries","React","className","tw","Scroll","root","Heading","level","name","birthDate","description","href","height","width","alt","src","knowsAbout","thing","rating","type","Label","Slider","ratingValue","max","bestRating","step","knowsLanguage","language","hasCertification","certification","issuedBy","datePublished","affiliation","affiliatedTo","startDate","endDate","author","_type","contributor","attendee","event","console","log","Head","_ref3","PrimitiveHead","title","site","variant"],"sourceRoot":""}